using ProgrammingAssignments.InterviewProlems;
using ProgrammingAssignments.BitManipulations;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using ProgrammingAssignments.StacksAndQueues;
using ProgrammingAssignments.Trees;
using ProgrammingAssignments.Tries;
using ProgrammingAssignments.LinkedLists;
using ProgrammingAssignments.Heaps;
using ProgrammingAssignments.Greedy;
using ProgrammingAssignments.Backtracking;
using ProgrammingAssignments.DynamicProgramming;
using ProgrammingAssignments.Graphs;
using ProgrammingAssignments.ArraysProblems;
using ProgrammingAssignments.Sorting;

namespace ProgrammingAssignments
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(new ConsistentHashing().Hash("INDIA",11));
            new Divide().divide(-2147483648,-1);
            new NQueenProblem().solveNQueens(8);
            new MaxDistance().maximumGap(new List<int>(){-1,-1,2 });
            new CheckTwoBracketExpression().solve("(a+b-c-d+e-f+g+h+i)", "a+b-c-d+e-f+g+h+i");
            new SpiralOrderMatrixII().generateMatrix(5);
            new SheldonAndPairOfCities().solve(4,6,2,new List<int>() { 1, 2, 3, 2, 4, 3 }, new List<int>() { 2, 3, 4, 4, 1, 1 }, new List<int>() { 4, 1, 1, 1, 1, 1 }, new List<int>() {1,1 }, new List<int>() {2,3 });
            new CheckBipartiteGraph().solve(9);
            new BlackShape().black(new List<string>() { "XXX", "XXX", "XXX" });
            new MinHeapsFraction().solve(new List<int>() { 1, 719, 983, 9293, 11321, 14447, 16411, 17881, 22079, 28297 },42);
            new NumDecoding().numDecodings("5163490394499093221199401898020270545859326357520618953580237168826696965537789565062429676962877038781708385575876312877941367557410101383684194057405018861234394660905712238428675120866930196204792703765204322329401298924190");
            new FirstDFSSearch().solve(new List<int>() { 1, 1, 2, 3, 2, 1, 6, 4, 8, 5, 5, 2, 7, 2, 9, 15, 14, 11, 16, 14, 1, 4, 20, 22, 2, 13, 3, 5, 26, 14, 21, 9, 32, 13, 19, 28, 11, 2, 22, 33, 7, 12, 4, 31, 3, 32, 38, 14, 9, 12, 29 },44,1);
            new NumberOfIslands().solve(new List<List<int>>() { new List<int>() { 0, 0, 1, 0, 1, 0, 1, 1, 1 },new List<int>() { 0, 1, 0, 0, 1, 1, 1, 0, 1 } });
            new MatrixChainMultiplication().solve(new List<int>(){ 45, 17, 34, 27, 12, 22 });
            new RegularExpressionMatch().isMatch("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "*");
            new LongestCommonSubsequence().solve("bebdeeedaddecebbbbbabebedc", "abaaddaabbedeedeacbcdcaaed");
            new SortingProbs().AlternateSort(new List<int>() { -1, -2, -3, 4, 5 });
            new MaximumSumValue().solve(new List<int>() { 1, 5, -3, 4, -2 },2,1,-1);
            new MaximumSumValue().solve(new List<int>() { -44, -41, 1, -26 }, 29, -15, 27);
            new SudoKu().solve(new List<string>() { "53..7....", "6..195...", ".98....6.", "8...6...3", "4..8.3..1", "7...2...6", ".6....28.", "...419..5", "....8..79" });
            new UniquePermutatons().permute(new List<int>() { 1,1,2});
            new Permutations().permute(new List<int>() {1,2,3 });
            new FreeCars().solve(new List<int>() { 1, 7, 6, 2, 8, 4, 4, 6, 8, 2 }, new List<int>() { 8, 11, 7, 7, 10, 8, 7, 5, 4, 9 });
            new FinishMaximumJobs().solve(new List<int>() { 1, 5, 7, 1 }, new List<int>() { 7, 8, 8, 8 });
            new ConnectRopes().Solve(new List<int>() { 1, 67, 132, 89, 17 });
            new MagicianAndChocolate().nchoc(10,new List<int>{ 2147483647, 2000000014, 2147483647 });
            /*
            var T = int.Parse(Console.ReadLine());
            while (T-- > 0)
            {
            var NM = Console.ReadLine().Split(' ');
            var N = int.Parse(NM[0]);
            var M = int.Parse(NM[1]);
            var words = Console.ReadLine().Split(' ');//N words //Split() return string[]
            var weigths = Array.ConvertAll(Console.ReadLine().Split(' '), int.Parse);//N wieghts
            var prefixes = Console.ReadLine().Split(' ');//List<string>
            new AutoComplete().DoAutoComplete(words,prefixes,weigths,N);

            } */


            var answer = new SortingProbs().InversionCount(new List<int>() { 28, 18, 44, 49, 41, 14 });
           // var ttt = Matrix.GenerateMatrix(5);
            //new BuildTree().buildTree(new List<int>() { 6, 1, 3, 2 }, new List<int>() { 6, 3, 2, 1 });

            //var stt = StacksProblems.InfixToPostfix("q+(c*t)*o+(g*g)+q*(i-a)*p-(i*l)");
            //var L1  = LinkedListsOps.GenerateList(new List<int>() { 21,11,34,9,1});
            //var L2  = LinkedListsOps.GenerateList(new List<int>() { 1});
            //var tm = LinkedListsOps.swapPairs(L1);
            //var tm = LinkedListsOps.addTwoNumbers(L1,L2);
            //var obj = new LRUCache(11);
            //var obj = new LRUCache(7);

            /*
            new SpellingChecker().solve(new List<string>() { "arm","boom"}, new List<string>() { "arm", "booz" });
            TreeNode node = DeserializeBTree.FromLevelOrderTraversal(new List<int>() {  90, 83, 93, 76, 84, 92, 101, 75, 82, -1, 89, 91, -1, 98, 111, -1, -1, 79, -1, 87, -1, -1, -1, 94, 100, -1, 108, 78, 80, 85, 88, -1, 95, 99, -1, 106, 110, 77, -1, -1, 81, -1, 86, -1, -1, -1, 96, -1, -1, 104, 107, 109, 112, -1, -1, -1, -1, -1, -1, -1, 97, 103, 105, -1, -1, -1, -1, 102, 114, -1, -1, -1, -1, -1, -1, -1, -1, 113, -1, -1, -1 });
            //TreeNode node = DeserializeBTree.FromLevelOrderTraversal(new List<int>() { 344, 162, 345, 152, 181, -1, -1, 106, 161, 173, 261, 92, 133, 157, -1, 165, 178, 256, 329, 86, 104, 108, 137, 154, 160, 163, 171, 174, 179, 210, 258, 265, 335, 83, 87, 102, 105, 107, 114, 134, 147, 153, 155, 159, -1, -1, 164, 170, 172, -1, 176, -1, 180, 182, 221, 257, 259, 264, 311, 334, 337, 80, 85, -1, 90, 96, 103, -1, -1, -1, -1, 109, 132, -1, 135, 144, 148, -1, -1, -1, 156, 158, -1, -1, -1, 167, -1, -1, -1, 175, 177, -1, -1, -1, 202, 219, 223, -1, -1, -1, 260, 262, -1, 278, 314, 331, -1, 336, 339, 79, 82, 84, -1, 88, 91, 93, 97, -1, -1, -1, 113, 117, -1, -1, 136, 139, 145, -1, 150, -1, -1, -1, -1, 166, 168, -1, -1, -1, -1, 186, 208, 214, 220, 222, 245, -1, -1, -1, 263, 269, 304, 313, 319, 330, 333, -1, -1, 338, 341, -1, -1, 81, -1, -1, -1, -1, 89, -1, -1, -1, 95, -1, 98, 110, -1, 115, 125, -1, -1, 138, 141, -1, 146, 149, 151, -1, -1, -1, 169, 185, 193, 203, 209, 213, 218, -1, -1, -1, -1, 241, 247, -1, -1, 268, 276, 297, 307, 312, -1, 317, 328, -1, -1, 332, -1, -1, -1, 340, 343, -1, -1, -1, -1, 94, -1, -1, 99, -1, 111, 116, -1, 120, 128, -1, -1, 140, 142, -1, -1, -1, -1, -1, -1, -1, -1, 184, -1, 192, 198, -1, 206, -1, -1, 211, -1, 215, -1, 224, 244, 246, 250, 267, -1, 275, 277, 291, 299, 306, 308, -1, -1, 316, 318, 320, -1, -1, -1, -1, -1, 342, -1, -1, -1, -1, 101, -1, 112, -1, -1, 118, 122, 126, 130, -1, -1, -1, 143, 183, -1, 189, -1, 195, 200, 205, 207, -1, 212, -1, 217, -1, 227, 243, -1, -1, -1, 248, 251, 266, -1, 274, -1, -1, -1, 281, 295, 298, 301, 305, -1, -1, 309, 315, -1, -1, -1, -1, 323, -1, -1, 100, -1, -1, -1, -1, 119, 121, 124, -1, 127, 129, 131, -1, -1, -1, -1, 187, 190, 194, 196, 199, 201, 204, -1, -1, -1, -1, -1, 216, -1, 226, 239, 242, -1, -1, 249, -1, 253, -1, -1, 270, -1, 280, 290, 294, 296, -1, -1, 300, 302, -1, -1, -1, 310, -1, -1, 321, 325, -1, -1, -1, -1, -1, -1, 123, -1, -1, -1, -1, -1, -1, -1, -1, 188, -1, 191, -1, -1, -1, 197, -1, -1, -1, -1, -1, -1, -1, -1, 225, -1, 231, 240, -1, -1, -1, -1, 252, 254, -1, 272, 279, -1, 283, -1, 292, -1, -1, -1, -1, -1, -1, 303, -1, -1, -1, 322, 324, 327, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 228, 232, -1, -1, -1, -1, -1, 255, 271, 273, -1, -1, 282, 284, -1, 293, -1, -1, -1, -1, -1, -1, 326, -1, -1, 229, -1, 238, -1, -1, -1, -1, -1, -1, -1, -1, -1, 285, -1, -1, -1, -1, -1, 230, 237, -1, -1, 287, -1, -1, 235, -1, 286, 288, 233, 236, -1, -1, -1, 289, -1, 234, -1, -1, -1, -1, -1, -1 });
            var fix = new Tree().RecoverTree(node);
            //var to = new LCA().lca(node,33,5);
            */

          //  new MaxMinSubArraySum().MaxMinusMinElemSum(new List<int>() { 2, 1, 5, 6, 2, 3 });
            
            /*
            var obj = new LRUCache(1);
            //G 2 S 2 6 G 1 S 1 5 S 1 2 G 1 G 2
            // S 2 1 S 2 2 G 2 S 1 1 S 4 1 G 2
            //var st = "S 5 13 S 9 6 S 4 1 G 4 S 6 1 S 8 11 G 13 G 1 S 12 12 G 10 S 15 13 S 2 13 S 7 5 S 10 3 G 6 G 10 S 15 14 S 5 12 G 5 G 7 G 15 G 5 G 6 G 10 S 7 13 G 14 S 8 9 G 4 S 6 11 G 9 S 6 12 G 3";
            //var st = "S 1 1 G 11 G 11 S 3 10 G 10 S 3 12 S 1 15 S 4 12 G 15 S 8 6 S 5 3 G 2 G 12 G 10 S 11 5 G 7 S 5 1 S 15 5 G 2 S 13 8 G 3 S 14 2 S 12 11 S 7 10 S 5 4 G 9 G 2 S 13 5 S 10 14 S 9 11 G 5 S 13 11 S 8 12 G 10 S 5 12 G 8 G 11 G 8 S 9 11 S 10 6 S 7 12 S 1 7 G 10 G 9 G 15 G 15 G 3 S 15 4 G 10 G 14 G 10 G 12 G 12 S 14 7 G 11 S 9 10 S 6 12 S 14 11 G 3 S 7 5 S 1 14 S 2 8 S 11 12 S 8 4 G 3 S 13 15 S 1 4 S 5 3 G 3 G 9 G 14 G 9 S 13 10 G 14 S 3 9 G 8 S 3 5 S 6 4 S 10 3 S 11 13 G 8 G 4 S 2 11 G 2 G 9 S 15 1 G 9 S 7 8 S 4 3 G 3 G 1 S 8 4 G 13 S 1 2 G 3";
            //var st = "S 2 1 S 1 10 S 8 13 G 12 S 2 8 G 11 G 7 S 14 7 S 12 9 S 7 10 G 11 S 9 3 S 14 15 G 15 G 9 S 4 13 G 3 S 13 7 G 2 S 5 9 G 6 G 13 S 4 5 S 3 2 S 4 12 G 13 G 7 S 9 7 G 3 G 6 G 2 S 8 4 S 8 9 S 1 4 S 2 9 S 8 8 G 13 G 3 G 13 G 6 S 3 8 G 14 G 4 S 5 6 S 10 15 G 12 S 13 5 S 10 9 S 3 12 S 14 15 G 4 S 10 5 G 5 G 15 S 7 6 G 1 S 5 12 S 1 6 S 11 8";
            var st = "S 2 1 S 2 2 G 2 S 1 1 S 4 1 G 2";
            var ca = st.Split(' ');
            for(int i = 0; i < ca.Length; i++)
            {
                if(ca[i] == "S")
                {
                    obj.set(Convert.ToInt32(ca[++i]), Convert.ToInt32(ca[++i]));
                }
                else if(ca[i] == "G")
                {
                   var t =  obj.get(Convert.ToInt32(ca[++i]));
                }
            }
            */

            /*var ans = Recursion.FindKthRow(10,365);
            var S = new List<string>() { "ipial", "qjqgt", "vfnue", "vjqfp", "eghva", "ufaeo", "atyqz", "chmxy", "ccvgv", "ghtow" };
            MapProblems.IsDictionary(S);*/

            //new Recursion().solve(10);
            //// Oddeven();
            //var st = StacksProblems.BalancedParanthesis("akash56");

            //var a = new TreeNode(1);
            //a.LeftChild = new TreeNode(6);
            //a.RightChild = new TreeNode(2);
            //a.RightChild.LeftChild = new TreeNode(3);

            //var tree = new Tree();
            // var B = new List<int>() { 51, 6, 10, 8, 22, 61, 56, 48, 88, 85, 21, 98, 81, 76, 71, 68, 18, 6, 14, 23, 72, 18, 56, 30, 97, 100, 81, 5, 99, 2, 85, 67, 46, 32, 66, 51, 76, 53, 36, 31, 81, 56, 26, 75, 69, 54, 54, 54, 83, 41, 86, 48, 7, 32, 85, 23, 47, 23, 18, 45, 79, 95, 73, 15, 55, 16, 66, 73, 13, 85, 14, 80, 39, 92, 66, 20, 22, 25, 34, 14, 51, 14, 17, 10, 100, 35, 9, 83, 31, 60, 24, 37, 69, 62 };
            //            ListProblems.UniqueElements(B);

            //var InOrder = tree.InOrderTraversal(a);

            //var A = new List<List<int>>() { new List<int>(){6}, new List<int>{2 }};//1 ,3,6,10,15
            //var B = new List<List<int>>() { new List<int>() { 6 }, new List<int> { 2 } };//1 ,3,6,10,15
            var A = new List<int>() { 78, 45, 80, 78, 83, 89, 71, 68, 70, 41, 21, 76, 50, 66, 40, 35, 32, 90, 70, 95, 95, 65, 55, 80, 67, 29, 64, 68, 89, 59, 58, 5, 29, 6, 13, 33, 91, 5, 72, 3, 34, 63, 13, 96, 75, 91, 27, 28, 100, 47, 45, 93, 39, 2, 1, 75, 29, 22, 51, 71, 46, 63, 31, 75, 72, 6, 97, 34, 16, 34, 76, 89, 23, 82, 84, 33, 83, 62, 31, 56, 47, 21, 53, 76, 70, 14, 30, 35, 45, 38, 94, 2, 43, 48, 86, 38, 87, 67, 67, 52, 72, 88, 50, 56, 86, 18, 79, 3, 85, 18, 3, 9, 84, 63, 86, 78, 98, 14, 94, 83, 85, 52, 14, 28, 69, 68, 92, 36, 39, 62, 13, 63, 95, 81, 30, 75, 71, 35, 89, 70, 58, 25, 43, 56, 18, 52, 82, 39, 81, 9, 32, 33, 97, 42, 79, 98, 70, 85, 6, 75, 32, 41, 84, 30, 24, 92, 93, 30, 16, 38, 85, 1, 56, 17, 3, 92, 76, 67, 88, 42, 61, 21, 4, 10, 62, 45, 5, 67, 16, 71, 33, 33, 1, 69, 23, 97, 96, 49, 49, 3, 66, 97, 84, 47, 41, 58, 15, 13, 52, 99, 56, 77, 29, 35, 55, 8, 74, 50, 83, 36, 100, 30, 20, 98, 20, 93, 23, 22, 75, 33, 69, 95, 13, 94, 35, 51, 42, 33, 45, 10, 81, 77, 63, 29, 10, 63, 92, 69, 43, 5, 23, 24, 56, 58, 70, 22, 37, 39, 4, 18, 4, 16, 28, 63, 66, 3, 32, 82, 35, 65, 67, 95, 39, 27, 51, 88, 84, 50, 100, 85, 23, 55, 34, 60, 4, 12, 82, 11, 33, 26, 23, 38, 83, 17, 77, 91, 40, 80, 48, 87, 51, 49, 71, 45, 63, 48, 97, 90, 19, 85, 70, 26, 70, 2, 22, 6, 21, 18, 17, 32, 13, 8, 1, 68, 64, 85, 38, 77, 76, 96, 1, 75, 12, 21, 89, 76, 1, 17, 8, 81, 37, 54, 62, 97, 19, 93, 14, 96, 35, 95, 89, 51, 12, 47, 84, 59, 85, 8, 29, 49, 80, 78, 41, 25, 82, 48, 44, 42, 85, 26, 38, 1, 100, 6, 88, 12, 89, 33, 9, 11, 46, 8, 78, 88, 32, 100, 20, 71, 13, 46, 10, 9, 91, 88, 59, 16, 56, 37, 34, 54, 27, 27, 29, 1, 28, 51, 21, 1, 13, 16, 49, 68, 69, 45, 74, 7, 4, 38, 65, 53, 30, 89, 50, 98, 74, 23, 26, 85, 66, 81, 30, 28, 45, 22, 86, 78, 37, 82, 30, 39, 92, 93, 27, 41, 8, 20, 37, 22, 71, 91, 18, 42, 26, 43, 30, 87, 35, 32, 57, 5, 8, 21, 7, 62, 13, 62, 64, 41, 99, 16, 36, 96, 72, 53, 1, 9, 47, 96, 93, 35, 1, 14, 70, 88, 28, 34, 60, 91, 64, 71, 96, 99, 9, 34, 95, 25, 26, 77, 88, 94, 34, 73, 100, 18, 53, 38, 52, 19, 72, 43, 47, 92, 21, 79, 93, 7, 52, 44, 28, 13, 1, 78, 29, 66, 1, 49, 57, 88, 8, 35, 100, 56, 24, 63, 30, 32, 15, 77, 55, 84, 14, 11, 21, 72, 78, 94, 39, 52, 81, 67, 71, 9, 29, 65, 19, 36, 34, 89, 92, 65, 28, 21, 23, 92, 51, 11, 15, 72, 73, 49, 81, 2, 22, 34, 24, 95, 27, 45, 76, 18, 60, 98, 70, 81, 92, 48, 72, 61, 4, 31, 65, 89, 51, 39, 57, 81, 58, 4, 85, 34, 58, 71, 16, 100, 57, 55, 37, 55, 37, 64, 41, 64, 31, 34, 74, 89, 32, 96, 24, 10, 14, 96, 55, 7, 11, 47, 97, 3, 44, 61, 94, 54, 18, 3, 20, 1, 12, 81, 34, 84, 31, 22, 22, 67, 76, 11, 45, 95, 63, 99, 48, 9, 58, 69, 38, 6, 10, 7, 75, 48, 72, 25, 30, 12, 53, 93, 94, 23, 54, 55, 17, 32, 46, 44, 64, 94, 98, 62, 31, 29, 56, 73 }; //{ 1000000, 1000000 };
            //var rt = BinarySearchProblems.paint(1, 1000000, A);
            //var A = new List<int>() {};

            //     var A = new List<int>() { 1000442, 1000206, 1000956, 1000143, 1000426, 1000592, 1000426, 1000136, 1000654, 1000426, 1000115, 1000121, 1000311, 1000451, 1000265, 1000426, 1000426, 1000254, 1000501, 1000715, 1000635, 1000602, 1000943, 1000119, 1000426, 1000426, 1000426, 1000378, 1000975, 1000292, 1000851, 1000426, 1000426, 1000181, 1000355, 1000426, 1000248, 1000143, 1000426, 1000985, 1000426, 1000634, 1000426, 1000945, 1000880, 1000426, 1000426, 1000135, 1000426, 1000402, 1000156, 1000426, 1000835, 1000599, 1000192, 1000451, 1000426, 1000241, 1000124, 1000100, 1000812, 1000611, 1000426, 1000641, 1000426, 1000426, 1000461, 1000872, 1000973, 1000426, 1000438, 1000517, 1000243, 1000658, 1000738, 1000396, 1000426, 1000426, 1000068, 1000427, 1000426, 1000504, 1000426, 1000462, 1000294, 1000504, 1000421, 1000883, 1000414, 1000426, 1000937, 1000426, 1000426, 1000819, 1000400, 1000323, 1000855, 1000779, 1000353, 1000426, 1000426, 1000506, 1000779, 1000487, 1000696, 1000729, 1000426, 1000025, 1000357, 1000946, 1000101, 1000459, 1000893, 1000426, 1000450, 1000491, 1000049, 1000420, 1000426, 1000103, 1000638, 1000315, 1000011, 1000426, 1000861, 1000111, 1000030, 1000477, 1000454, 1000309, 1000426, 1000756, 1000880, 1000213, 1000426, 1000206, 1000426, 1000436, 1000426, 1000026, 1000426, 1000756, 1000039, 1000426, 1000426, 1000426, 1000686, 1000426, 1000665, 1000426, 1000890, 1000992, 1000235, 1000701, 1000305, 1000482, 1000405, 1000426, 1000282, 1000191, 1000663, 1000199, 1000426, 1000119, 1000901, 1000998, 1000323, 1000426, 1000426, 1000844, 1000032, 1000737, 1000756, 1000426, 1000426, 1000275, 1000426, 1000635, 1000426, 1000426, 1000021, 1000426, 1000426, 1000322, 1000426, 1000501, 1000987, 1000995, 1000567, 1000795, 1000092, 1000758, 1000012, 1000426, 1000196, 1000641, 1000455, 1000426, 1000085, 1000933, 1000730, 1000426, 1000602, 1000549, 1000211, 1000025, 1000986, 1000349, 1000264, 1000426, 1000024, 1000426, 1000426, 1000680, 1000869, 1000320, 1000020, 1000194, 1000426, 1000426, 1000426, 1000716, 1000356, 1000748, 1000201, 1000426, 1000426, 1000002, 1000215, 1000850, 1000184, 1000803, 1000688, 1000561, 1000258, 1000426, 1000426, 1000612, 1000426, 1000246, 1000109, 1000156, 1000426, 1000355, 1000657, 1000929, 1000953, 1000159, 1000426, 1000919, 1000408, 1000778, 1000038, 1000046, 1000300, 1000272, 1000800, 1000426, 1000442, 1000551, 1000825, 1000501, 1000081, 1000426, 1000157, 1000203, 1000426, 1000022, 1000704, 1000426, 1000426, 1000034, 1000426, 1000163, 1000140, 1000426, 1000426, 1000704, 1000880, 1000707, 1000877, 1000214, 1000426, 1000426, 1000675, 1000312, 1000025, 1000426, 1000426, 1000792, 1000426, 1000326, 1000491, 1000633, 1000861, 1000426, 1000693, 1000426, 1000961, 1000647, 1000426, 1000426, 1000426, 1000426, 1000366, 1000871, 1000426, 1000904, 1000998, 1000114, 1000697, 1000426, 1000586, 1000426, 1000026, 1000994, 1000127, 1000205, 1000148, 1000280, 1000778, 1000380, 1000426, 1000122, 1000426, 1000426, 1000702, 1000426, 1000234, 1000426, 1000091, 1000426, 1000483, 1000712, 1000426, 1000425, 1000426, 1000692, 1000847, 1000331, 1000795, 1000328, 1000426, 1000677, 1000094, 1000426, 1000839, 1000890, 1000065, 1000641, 1000426, 1000426, 1000426, 1000463, 1000426, 1000445, 1000415, 1000243, 1000426, 1000426, 1000426, 1000029, 1000426, 1000426, 1000426, 1000572, 1000390, 1000931, 1000413, 1000606, 1000425, 1000426, 1000039, 1000657, 1000069, 1000998, 1000120, 1000426, 1000063, 1000015, 1000396, 1000426, 1000257, 1000397, 1000161, 1000426, 1000426, 1000493, 1000426, 1000501, 1000124, 1000426, 1000424, 1000902, 1000426, 1000426, 1000048, 1000426, 1000426, 1000394, 1000535, 1000426, 1000899, 1000654, 1000778, 1000120, 1000426, 1000426, 1000426, 1000568, 1000677, 1000426, 1000426, 1000723, 1000997, 1000426, 1000934, 1000881, 1000426, 1000687, 1000426, 1000487, 1000426, 1000426, 1000426, 1000131, 1000396, 1000107, 1000902, 1000426, 1000426, 1000525, 1000985, 1000426, 1000255, 1000991, 1000426, 1000426, 1000426, 1000020, 1000426, 1000426, 1000450, 1000455, 1000283, 1000426, 1000426, 1000426, 1000938, 1000426, 1000255, 1000426, 1000248, 1000099, 1000622, 1000426, 1000329, 1000005, 1000826, 1000060, 1000313, 1000426, 1000426, 1000426, 1000662, 1000426, 1000426, 1000426, 1000906, 1000482, 1000426, 1000349, 1000426, 1000968, 1000426, 1000426, 1000239, 1000426, 1000480, 1000357, 1000417, 1000311, 1000510, 1000085, 1000652, 1000426, 1000548, 1000426, 1000426, 1000426, 1000766, 1000751, 1000426, 1000685, 1000695, 1000455, 1000218, 1000426, 1000426, 1000426, 1000426, 1000696, 1000179, 1000506, 1000426, 1000408, 1000812, 1000871, 1000720, 1000144, 1000213, 1000083, 1000931, 1000128, 1000250, 1000426, 1000783, 1000426, 1000149, 1000376, 1000228, 1000426, 1000812, 1000000, 1000685, 1000525, 1000476, 1000826, 1000737, 1000426, 1000130, 1000561, 1000426, 1000281, 1000426, 1000866, 1000453, 1000240, 1000074, 1000426, 1000388, 1000426, 1000794, 1000426, 1000244, 1000426, 1000969, 1000817, 1000036, 1000426, 1000426, 1000490, 1000426, 1000795, 1000050, 1000808, 1000426, 1000426, 1000872, 1000426, 1000668, 1000426, 1000995, 1000140, 1000710, 1000983, 1000929, 1000434, 1000425, 1000019, 1000232, 1000892, 1000426, 1000561 };
            //var A = new List<int>() { 1000861, 1000963, 1000629, 1000629, 1000411, 1000629, 1000676, 1000789, 1000629, 1000629, 1000467, 1000101, 1000446, 1000534, 1000629, 1000846, 1000227, 1000629, 1000930, 1000480, 1000629, 1000115, 1000597, 1000848, 1000629 };

            //  var sn = ListProblems.firstMissingPositive(A);

            //var c = Matrix.sum(A,B);
            //var an = ArrayProblems.AlternatingSubarray(A,1);
            //var ans = ArrayProblems.evenOddSumByRemoveItem(A);

            //var nos = StringProblems.addBinaryStrings("1010110111001101101000", "1000011011000000111100110");
            //var nos = StringProblems.addBinary("1010110111001101101000", "1000011011000000111100110");
            //var c = ListProblems.subAWithContiguousElems(A);
            //var c = Modulo.findMod("23",25);
            //var a = new List<string>() {"abadadaf98", "abc98"};
            //var c = SortingProbs.solve(a);
            //var a = StringProblems.LongestPalindrome(String(Enumerable.Repeat('a',(int)Math.Pow(10,5)).ToArray()));

            //var an = StringProblems.ConversionCheck("brijesh");
            //var c = PlayWithNumbers.ReverseNumber(3);


            /*
            string str = new String(Enumerable.Repeat('a',(int)Math.Pow(10,4)).ToArray());
            stopwatch.Start();
            for (int i = 0; i < str.Length; i++)
            {
                var a = str.ElementAt(i);
            }
            stopwatch.Stop();
            string str2 = new String(Enumerable.Repeat('a', (int)Math.Pow(10, 5)).ToArray());
            Console.WriteLine(stopwatch.ElapsedMilliseconds);

            stopwatch.Start();
            for (int i = 0; i < str2.Length; i++)
            {
                var a = str[i];
            }
            stopwatch.Stop();
            Console.WriteLine(stopwatch.ElapsedMilliseconds);

            Console.ReadLine();*/
           // var weights = Array.ConvertAll(Console.ReadLine().Split(' '),int.Parse);


        }


    }
}
